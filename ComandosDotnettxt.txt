dotnet new web -o minimal_api
dotnet add package Microsoft.EntityFrameworkCore --version 8.0.3
dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.3
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.3
dotnet add package Pomelo.EntityFrameworkCore.MySql --version 8.0.2

dotnet tool install --global dotnet-ef    (só faz uma única instalação)

dotnet ef migrations add AdministradorMigration
dotnet ef database update

dotnet ef migrations add AdministradorSeed
dotnet ef database update

dotnet ef migrations add VeiculoMigration
dotnet ef database update


//Adicionando Swagger
dotnet add package Swashbuckle.AspNetCore --version 6.8.1


- no program CS:
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

app.UseSwagger();
app.UseSwaggerUI();

// pacote JWT
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.3


//Criando a Solução
dotnet new sln 
dotnet sln add API/minimal_api.csproj

dotnet new list

dotnet new mstest -o Test
dotnet sln add Test\test.csproj

cd Test
dotnet add reference ../API/minimal_api.csproj

dotnet test









async function login() {
    const url = 'http://192.168.0.188/administradores/login';
    const data = {
        email: 'administrador@teste.com',
        senha: '123456'
    };

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Accept': '*/*',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error(`Erro: ${response.status} ${response.statusText}`);
        }

        const result = await response.json();
        console.log('Login realizado com sucesso:', result);
    } catch (error) {
        console.error('Erro ao realizar login:', error);
    }
}

// Chama a função de login
login();



